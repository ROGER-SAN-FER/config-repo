server:
  port: 8083  # Puerto exclusivo para este microservicio

  cloud:
    openfeign:
      circuitbreaker:
        enabled: true   # ? ESTA ES LA QUE TE FALTA

# Timeouts Feign (cliente HTTP subyacente)
feign:                        # Configuraci�n de Feign (cliente declarativo de HTTP)
  circuitbreaker:
    enabled: true
  client:
    config:
      productos-service:       # Nombre del cliente (debe coincidir con el "name" de @FeignClient)
        connectTimeout: 2000   # Tiempo m�ximo (ms) para establecer conexi�n con el servidor
        readTimeout: 2000      # Tiempo m�ximo (ms) para esperar la respuesta del servidor
        loggerLevel: full     # Nivel de log de Feign (basic = muestra metodo HTTP, URL, estado y tiempo)
logging:
  level:
    io.github.openfeign: DEBUG

# Resilience4j: CB + Retry + Bulkhead para la llamada a productos
resilience4j:                 # Configuraci�n de Resilience4j (tolerancia a fallos)
  circuitbreaker:             # Secci�n de Circuit Breaker (corta llamadas cuando hay fallos)
    instances:                        # Declaraci�n de instancias (uno por cada cliente)
      productosClient:                # Nombre de la instancia (usado en @CircuitBreaker(name="productosClient"))
        slidingWindowType: COUNT_BASED   # Ventana de evaluaci�n basada en n�mero de llamadas (no en tiempo)
        slidingWindowSize: 10            # N�mero de llamadas consideradas en la ventana
        minimumNumberOfCalls: 4          # M�nimo de llamadas necesarias antes de calcular m�tricas
        failureRateThreshold: 50         # Porcentaje de fallos permitido (si >=50%, se abre el circuito)
        slowCallDurationThreshold: 2s    # Una llamada que tarde m�s de 2 segundos se considera "lenta"
        slowCallRateThreshold: 50        # % de llamadas lentas permitido (si >=50%, tambi�n se abre el circuito)
        waitDurationInOpenState: 10s     # Tiempo que el circuito permanece "abierto" antes de pasar a half-open
        permittedNumberOfCallsInHalfOpenState: 3 # N�mero de llamadas de prueba permitidas en half-open
        automaticTransitionFromOpenToHalfOpenEnabled: true # Transici�n autom�tica de OPEN a HALF-OPEN tras el tiempo
        recordExceptions:                # Lista de excepciones que cuentan como fallo
          - java.net.ConnectException        # Error de conexi�n ? cuenta como fallo
          - java.net.SocketTimeoutException  # Timeout en la comunicaci�n ? cuenta como fallo
        ignoreExceptions:                # Lista de excepciones que NO cuentan como fallo
          #tuapp.excepciones.NegocioException # Excepci�n de negocio propia, no afecta al circuito
  retry:                                # Configuraci�n de reintentos (Retry) en Resilience4j
    instances:                          # Definici�n de instancias de retry
      productosClient:                  # Nombre de la instancia (usado en @Retry(name="productosClient"))
        maxAttempts: 2                  # N�mero m�ximo de intentos ? 1 llamada inicial + 1 reintento extra
        waitDuration: 200ms             # Tiempo de espera entre cada intento
        retryExceptions:                # Lista de excepciones que disparan un reintento
          - java.net.SocketTimeoutException  # Si ocurre un timeout, se reintenta
          - java.io.IOException              # Si ocurre un error de I/O, se reintenta
  bulkhead:                   # Configuraci�n de Bulkhead (limita concurrencia)
    instances:
      productosClient:
        maxConcurrentCalls: 10 # M�ximo de llamadas concurrentes permitidas al mismo tiempo
        maxWaitDuration: 0     # Tiempo m�ximo que una llamada puede esperar si el bulkhead est� lleno (0 = no espera)

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

spring:
  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      spring.json.add.type.headers: false   # payload limpio (opcional)

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      # Para percentiles (p95/p99) de latencia HTTP
      percentiles-histogram:
        http.server.requests: true